ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


 
Кафедра «Програмної інженерії»

 
Практичне заняття №2
з дисципліни «Аналіз та рефакторінг коду»
на тему: "Методи рефакторингу коду програмного забезпечення" 
Виконав:						Прийняв(ла):
ст. гр. ПЗПІ-22-4					викл. Сокорчук. І. П.
Швед А. С.


 




 
Харків, 2025 р.
Мета роботи
Метою цього практичного заняття було навчитися основним методам рефакторингу коду на основі реальних прикладів з власних програмних проектів. Також передбачалося навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення якості коду.
Хід роботи
У ході практичного заняття було створено презентацію на тему "Методи рефакторингу коду програмного забезпечення". Презентація містить слайди, показані в додатку А, що детально пояснюють основні методи рефакторингу та їх застосування на реальних прикладах з програмних проектів. Зазначені слайди містять рекомендації та описи кожного методу, а також приклади на мові програмування C++, додаток Б.
Рефакторинг — це процес зміни структури коду без зміни його зовнішньої поведінки. Метою рефакторингу є покращення якості коду, його зрозумілості, зменшення складності, поліпшення підтримки та тестованості. Рефакторинг може включати перейменування змінних, видалення дублювання, покращення модульності, зміну алгоритмів або оптимізацію продуктивності без внесення змін у логіку програми.
Рекомендація 1: Розділяйте методи на дрібніші функції, кожна з яких виконує одну задачу.
Опис: Розбиття великих методів на кілька дрібніших допомагає покращити зрозумілість коду та зменшити складність. Кожен метод повинен виконувати лише одну задачу, що спрощує його тестування та підтримку. Це також підвищує можливість повторного використання коду, оскільки невеликі методи часто є більш універсальними та легкими для реорганізації в інші частини програми.
Рекомендація 2: Переміщення методів до класу, який їх найбільше використовує.
Опис: Коли методи виконуються в одному класі, але більше підходять для іншого, їх переміщення дозволяє зменшити дублювання даних та залежностей, покращити інкапсуляцію та забезпечити, щоб логіка виконувалася в тому класі, де це логічно найбільше. Це допомагає зробити клас більш самодостатнім і зручним для використання.
Рекомендація 3: Назва методу повинна давати чітке уявлення про те, що саме робить метод.
Опис: Перейменування методу на більш точний робить його функціональність зрозумілішою для інших розробників, що працюють з кодом. Тепер очевидно, що метод не просто обробляє замовлення, а саме генерує рахунок для замовлення.
Посилання на захист презентації: https://youtu.be/MO9M1co_yqM
Посилання на GitHub:
https://github.com/NureShvedAndrii/arkpz-pzpi-22-4-shved-andrii
Додаток А
Слайди презентації
Рисунок 1 - Титульний слайд
Рисунок 2 - Мета
Рисунок 3 - Рефакторинг
Рисунок 4 - Обрані методи рефакторингу

Рисунок 5 - Extract Method
Рисунок 6 - Move Method
Рисунок 7 - Rename Method
Рисунок 8 - Код до рефакторингу

Рисунок 9 - Код після рефакторингу
Рисунок 10 - Висновки
Додаток Б
Використаний код
Код до рефакторингу:
#include <iostream>
#include <vector>

class Order {
public:
    double calculateTotal() {
        double total = 0.0;

        if (isSpecial()) {
            total += 100.0;
        }
        else {
            total += 50.0;
        }

        if (isExpedited()) {
            total += 20.0;
        }

        return total;
    }

    void saveOrder(Order order) {
        if (order.isValid()) {
            saveToDatabase(order);
        }
        else {
            std::cerr << "Invalid order!" << std::endl;
        }
    }

private:
    bool isSpecial() { return false; }
    bool isExpedited() { return true; }

    bool isValid() {
        return true; 
    }

    void saveToDatabase(Order order) {
    }
};

class Invoice {
public:
    void processOrder() {
    }
};

int main() {
    Order order;
    order.saveOrder(order);

    Invoice invoice;
    invoice.processOrder();

    std::cout << "Total order value: " << order.calculateTotal() << std::endl;

    return 0;
}
Код після рефакторингу:
#include <iostream>
#include <vector>

class Order {
public:
    double calculateTotal() {
        double total = 0.0;
        total += specialOrderCost();
        total += expeditedOrderCost();
        return total;
    }

    void saveOrder(Order order, OrderDatabase& db) {
        if (order.isValid()) {
            db.save(order);
        }
        else {
            std::cerr << "Invalid order!" << std::endl;
        }
    }

private:
    bool isSpecial() { return false; }
    bool isExpedited() { return true; }

    bool isValid() {
        return true;
    }

    double specialOrderCost() {
        return isSpecial() ? 100.0 : 50.0;
    }

    double expeditedOrderCost() {
        return isExpedited() ? 20.0 : 0.0;
    }
};

class OrderDatabase {
public:
    void save(Order order) {
        std::cout << "Order saved to the database." << std::endl;
    }
};

class Invoice {
public:
    void generateInvoiceForOrder(Order order) {
        std::cout << "Invoice generated for the order." << std::endl;
    }
};

int main() {
    Order order;
    OrderDatabase db;
    order.saveOrder(order, db);

    Invoice invoice;
    invoice.generateInvoiceForOrder(order);

    std::cout << "Total order value: " << order.calculateTotal() << std::endl;

    return 0;
}


